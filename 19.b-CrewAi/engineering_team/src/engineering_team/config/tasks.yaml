design_task:
  description: >
    Toma los requisitos de alto nivel descritos aquí y prepara un diseño detallado para el ingeniero;
    todo debe estar en 1 módulo de Python, pero describe las clases y métodos en el módulo.
    Estos son los requisitos: {requirements}
    IMPORTANTE: Solo muestra el diseño en formato markdown, detallando las clases y funciones del módulo y describiendo su funcionalidad.
  expected_output: >
    Un diseño detallado para el ingeniero, identificando las clases y funciones en el módulo.
  agent: engineering_lead
  output_file: output/{module_name}_design.md

code_task:
  description: >
    Escribe un módulo de Python que implemente el diseño descrito por el líder de ingeniería, para cumplir con los requisitos.
    Estos son los requisitos: {requirements}
  expected_output: >
    Un módulo de Python que implemente el diseño y cumpla con los requisitos.
    IMPORTANTE: Muestra SOLO el código Python sin ningún formato markdown, delimitadores de bloque de código ni comillas invertidas (no backticks).
    IMPORTANTE: Las cadenas de texto y los comentarios deben estar en español y las variables en inglés.
    La salida debe ser código Python válido que pueda guardarse directamente en un archivo y ejecutarse.
  agent: backend_engineer
  context:
    - design_task
  output_file: output/{module_name}.py

frontend_task:
  description: >
    Escribe una interfaz Gradio en un módulo app.py que demuestre la clase backend dada en {module_name}.
    Supón que solo hay 1 usuario y mantén la interfaz muy simple, solo como un prototipo o demo.
    Estos son los requisitos: {requirements}
  expected_output: >
    Una interfaz Gradio en el módulo app.py que demuestre la clase backend dada.
    El archivo debe estar listo para ejecutarse tal cual, en el mismo directorio que el módulo backend, e importar la clase backend desde {module_name}.
    IMPORTANTE: Muestra SOLO el código Python sin ningún formato markdown, delimitadores de bloque de código ni comillas invertidas (no backticks).
    IMPORTANTE: Las cadenas de texto y los comentarios deben estar en español y las variables en inglés.
    La salida debe ser código Python válido que pueda guardarse directamente en un archivo y ejecutarse.
  agent: frontend_engineer
  context:
    - code_task
  output_file: output/app.py

test_task:
  description: >
    Escribe pruebas unitarias para el módulo backend {module_name} y crea un archivo test_{module_name} en el mismo directorio que el módulo backend.
  expected_output: >
    Un módulo test_{module_name} que pruebe el módulo backend dado.
    IMPORTANTE: Muestra SOLO el código Python sin ningún formato markdown, delimitadores de bloque de código ni comillas invertidas (no backticks).
    IMPORTANTE: Las cadenas de texto y los comentarios deben estar en español y las variables en inglés.
    La salida debe ser código Python válido que pueda guardarse directamente en un archivo y ejecutarse.
  agent: test_engineer
  context:
    - code_task
  output_file: output/test_{module_name}.py
